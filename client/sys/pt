scrx, scry = term.getSize()
serverName = "Debug"
function repaint(bgColor,txtColor,borderColor)
	term.setCursorPos(1, 1);
	if bgColor == nil then
		bgColor = 1
	end
	if txtColor == nil then
		txtColor = 32768
	end
	if borderColor == nil then
		borderColor = 8192
	end
	term.setBackgroundColor(bgColor);
	clrrr = ""
	for k = 1, scrx do
		clrrr = clrrr.." "
	end
	for j = 1, scry do
		print(clrrr);
	end
	
	term.setBackgroundColor(borderColor);
	
	term.setTextColor(txtColor);
	

	term.setCursorPos(1, 1);
	write(clrrr)
	term.setCursorPos(1, scry);
	write(clrrr)
	term.setCursorPos(1, 1);
	write(serverName.."");	
end

function getServers()

end

function notebar()
	globaltime = textutils.formatTime(os.time(),false)
	timelen = (scrx + 1) - string.len(globaltime)
	term.setCursorPos(timelen, 1)
	term.setBackgroundColor(colors.green)
	term.setTextColor(colors.white)
	print(globaltime)
end

function showErrorMessage(message)
	term.setBackgroundColor(16384);
	term.setTextColor(1);
	
	for i = 8, 13 do
		term.setCursorPos(2, i);
		for j = 1, 24 do
			write(" ");
		end 
		print();
	end
	
	term.setCursorPos(11, 9);
	write("Error");
	
	
	term.setCursorPos(4, 11);
	write(message);
end

function showInformationMessage(title, line1, line2)
	term.setBackgroundColor(colors.lightBlue);
	term.setTextColor(colors.white);
	for i = 2, 6 do
		term.setCursorPos(2, i);
		for j = 1, (scrx - 2) do
			write(" ");
		end 
		print();
	end
	
	if title == nil then
		term.setCursorPos(3, 2);
		printStringCentre(title)
	else
		term.setCursorPos(3, 2);
		printStringCentre(title);
	end
	
	
	term.setCursorPos(4, 4);
	printStringCentre(line1)
	term.setCursorPos(4, 5);
	printStringCentre(line2)
end

function showInputDialog(message)
	term.setBackgroundColor(512);
	term.setTextColor(1);
	for l = 6, 17 do
		term.setCursorPos(2, l);
		for k = 1, 24 do
			write(" ");
		end 
		print();
	end
	term.setCursorPos(4, 6);
	io.write(message)
	term.setCursorPos(5, 14);
	input = io.read()
	return input;
end

function home()
	
end

function printStringCentre(sString)
    x, y = term.getCursorPos()
    y = y + 1
    term.setCursorPos(1, y)
    width, height = term.getSize()
    nStringCentre = math.floor(string.len(sString) / 2)
    nMonitorCentre = math.floor(width / 2)
    x = math.floor(nMonitorCentre - nStringCentre)
    term.setCursorPos(x, y)
    print(sString)
end

function split(pString, pPattern)
	local temp = {}
	if string.match(pString,"#") then
		return ""
	else
		local Table = {} 
		local fpat = "(.-)" .. pPattern
		local last_end = 1
		local s, e, cap = pString:find(fpat, 1)
		while s do
			if s ~= 1 or cap ~= "" then
				table.insert(Table,cap)
			end
			last_end = e+1
			s, e, cap = pString:find(fpat, last_end)
		end
		if last_end <= #pString then
			cap = pString:sub(last_end)
			table.insert(Table, cap)
		end
		return Table
	end
	
end

function confReader(load,conf)
	conf = load.."/"..conf
	rrr = fs.open(conf,"r")
	local conflen1 = rrr.readLine()
	local conflen2 = split(conflen1,"=")
	local conflen = tonumber(conflen2[2]) - 1
	config = {}
	confr = {}
	local temp = {}
	for i = 1,conflen do
		confr[i] = rrr.readLine()
		local temp = split(confr[i],"=")
		config[i] = temp[2]
	end
	progName = config[1]
	progFile = config[2]
	iconVar = config[3]
	iconPath = config[4]
	extIcon = config[5]
	iconBG = config[6]
	iconTXT = config[7]
	admin = config[8]
	progType = config[9]
	
end

function loadAll(dir,ext)
	loader = fs.list(dir)
	pName = {}
	pFile = {}
	pIcon = {}
	succ = 0
	for i = 1,table.getn(loader) do
		if string.match(loader[i],".*."..ext.."$") then
			local load = loader[i]
			confReader(dir,load)
			succ = succ + 1
			pName[succ] = progName
			pFile[succ] = progFile
			pIcon[succ] = iconPath
		end
	end
	spName = textutils.serialize(pName)
	spFile = textutils.serialize(pFile)
	spIcon = textutils.serialize(pIcon)
	return spName, spFile, spIcon
end

function loadIcon(icon)
	icon = "/sys/apps/"..icon
	local bur = fs.open(icon,"r")
	local rdar = bur.readLine()
	local rdar2 = split(rdar,"=")
	local ilen = tonumber(rdar2[2]) - 1
	iconDet = {}
	icon = {}
	for i = 1, ilen do
		icon[i] = bur.readLine()
		local temp = split(icon[i],"=")
		iconDet[i] = temp[2]
	end
	sIcon = textutils.serialize(iconDet)
	return sIcon
end